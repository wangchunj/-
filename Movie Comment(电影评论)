Movie Comment(电影评论)针对相应的python文件

#第三行 type(html_data)#数据类型str 测试
# print(html_data) 测试
#第九行 print(nowplaying_movie_list[0]) 测试

# 得到最新电影：很可能是未上映的
# nowplaying_list= [] 测试
# 测试 得到最新电影id和名称
# for item in nowplaying_movie_list:
#     nowplaying_dict={}
#     nowplaying_dict['id']=item['data-subject']
#     for tag_img_item in item.find_all('img'):
#         nowplaying_dict['name']= tag_img_item['alt']
# nowplaying_list.append(nowplaying_dict)
# nowplaying_list 测试
# for tag_img_item in item.find_all('img'):
#     nowplaying_dict['name']= tag_img_item['alt']
# nowplaying_list.append(nowplaying_dict)
# print(nowplaying_list)测试

#16行 movie['data-subject'] 测试
#19行 nowplaying_dict2测试
#21行 nowplaying_dict2测试
# print(nowplaying_list2)测试

#31行 type(eachCommentList) 列表类型 测试
数据清洗前
# eachCommentList[0] 列表中的元素
# type(eachCommentList[0]) 元素类型：bs4.element.Tag标签
# type(str(eachCommentList[0]))类型转换
# str(eachCommentList[0]).strip()将换行转为转义字符

#49行 words_stat.head() 测试

#原代码画词云图
# 报错：提示list无item属性--》python2.7和3版本规则不同
# word_frequence= {x[0]:x[1]forxinwords_stat.head(1000).values}
# word_frequence_list= [] 
# for key in word_frequence:
#     temp= (key,word_frequence[key])
#     word_frequence_list.append(temp)
#     wordcloud=wordcloud.fit_words(word_frequence_list)
# plt.imshow(wordcloud)


# import numpy as np
# from PIL import Image  方法1
# 词云生成工具#方法1引用包
# from wordcloud import WordCloud,ImageColorGenerator
现在的方法测试
# # x[0]\x[1]代表词和次数
# for x in words_stat.head().values:
#     print(x)   测试

# # key代表词，word_frequence[key]代表次数
# for k in x:
#     print(k)   测试
处理之后测试类型
type(wordcloud)
wordcloud




